{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"184041167487445186","abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"996606597389393650":{"error_kind":"string","string":"Merkle root does not match"},"2841612738018827821":{"error_kind":"string","string":"Nullifier hash does not match"}}},"bytecode":"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","debug_symbols":"pdfRbuowDAbgd+k1F7ETO8le5eho6liZKlUFdTDpCO3dT4DfMC5SMXplQ/FHkjpRe2zeu7fDx2s/brafzcufY/M29cPQf7wO23W777dj+fb4vWrs4+t+6rryVfPjeqnatVM37puX8TAMq+arHQ7nH33u2vEc9+1UrrpV043vJRZw0w/dKfte3apdvdRnKw5yK5f7epqpF7Z60lt9uqvnej1zygDYO64Jvi4QqQ2BKMkzY4ikNoboXU2QmTHE6G0MMVdnoXUhBwGQS9Hv68nxdRWcyjNzyM7uBGWuzmGml0RsDupitZfcwmaimW5kTdbOrNlXiZlmIH9bBs/VW0F+4b2cXYecrusgT63DYx1NurilKS7uydlRLG5KZesIVao15Ux9UhtA9lqr59kTMgDwGm4APQ5kA4LLzwByHYG6VAXC0kNeFp/yrMuPeVm8Kzgt3hWcF54Oc8CD22p2Gou3VQ7XbRHvnxv+lk/tup/unnQadmUrrRqmS+BL8OX/TzEgShl2+VPW0nOloTkiJsR8id4hEiIjesSAKIjwPDwPz8ML8AK8AC/AC/ACvAAvwAvwAjyBJ/AEnsATeAJP4Ak8gSfwFJ7CU3gKT+EpPIWn8BSewovwIrwIL8KL8CK8CC/Ci/AivAQvwUvwErwEL8FL8BK8BC/By/AyvAwvw8vwMrwML8PL8DI8cs4SsoQt8ZYES8QStSRakiwxmUwmk8lkMplMJpPJZDKZTCaT2WQ2mU1mk9lkNvm8dU4PPl/t1LdvQ4f3jM1hXP947dj/29kVezHZTdt1936YutPGPV8rW/k/","file_map":{"50":{"source":"use dep::poseidon;\nmod merkle_tree;\nfn main(\n    //Public Inputs\n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n\n    //Private Inputs\n    nullifier: Field,\n    secret: Field,\n    merkle_proof: [Field; 20], //20 is the depth of the Merkle tree\n    is_even: [bool; 20]\n) {\n    // compute the commitment from the nullifier and secret\n    let commitment: Field = poseidon::poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    // check that the nullifier hash is matches the nullifier\n    let computed_nullifier_hash: Field = poseidon::poseidon2::Poseidon2::hash([nullifier], 1);\n    assert(computed_nullifier_hash == nullifier_hash, \"Nullifier hash does not match\");\n\n    //check that the root matches the Merkle root\n    //This `merkle_tree` is a module that we will create to handle Merkle tree operations\n    let computed_root: Field = merkle_tree::compute_merkle_root(commitment, merkle_proof, is_even);\n    assert(computed_root == root, \"Merkle root does not match\");\n\n    //This is required to ensure no one can front-run the transaction an steal the funds\n    let recipient_binding = recipient * recipient;\n}","path":"/Users/patrickcarneiro/Courses/ZKProofs/zk_mixer/circuits/src/main.nr"},"51":{"source":"use dep::poseidon;\npub fn compute_merkle_root(\n    leaf: Field,\n    merkle_proof: [Field; 20], //20 is the depth of the Merkle tree\n    is_even: [bool; 20]\n) -> Field { \n    // mutable variable to hold the current node value\n    let mut current_hash: Field = leaf;\n\n    // increment through the levels\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (current_hash, merkle_proof[i])\n        } else {\n            (merkle_proof[i], current_hash)\n        };\n        // compute the hash of the current node\n        current_hash = poseidon::poseidon2::Poseidon2::hash([left, right], 2);\n    }\n    // return the computed root\n    current_hash\n}","path":"/Users/patrickcarneiro/Courses/ZKProofs/zk_mixer/circuits/src/merkle_tree.nr"},"58":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/patrickcarneiro/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}